[
  {
    "objectID": "random_forest_explanation.html",
    "href": "random_forest_explanation.html",
    "title": "Explaining a Random Forest",
    "section": "",
    "text": "We’ll start with a super easy example, the obligatory iris dataset with a random forest classifier. Below we set up the model using scikit-learn, everything so far should look very familiar.\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\n\n\niris = load_iris()\nrandom_forest = RandomForestClassifier()\n\nSince we’ll use GPT-4 for the tutorial, and because GPT-4 is very smart, it probably knows the iris dataset anyway. To trick it a little bit into thinking we have a new dataset, let’s just rename the features and “jumble” the data a bit.\n\nfeature_names = [\"length of table\", \"width of table\", \"length of dresser\", \"width of dresser\"]\nX, y = iris.data, iris.target\nrandom_forest.fit(X, y)\n\nRandomForestClassifier()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifierRandomForestClassifier()\n\n\n\nCreate an explainer\nfrom llama_lime.explainer import Explainer explainer = Explainer( random_forest, features=X, feature_names=feature_names, output=y, class_names=[“living room”, “bedroom”, “dining room”], target_audience=“a business person with a solid understanding of basic statistics )\nexplainer.add_permutation_importance()\nexplainer.add_feature_importances() explainer.add_class_importances() explainer.add_instance_importances() explainer.add_feature_class_interactions() explainer.add_lime_instances(X[10:30]) # Use the explainer to generate explanations # explanations = explainer.explain(X) explanations = explainer.explain()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]